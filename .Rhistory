devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
library(dbCodeBookr)
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
library(dbCodeBookr)
a2<-read.csv("CKM_analysis2.csv")
setwd("D:/zhido/产出/周洋/NLR")
a2<-read.csv("CKM_analysis2.csv")
yyds_eda_pdf(a2,"as.pdf")
rm(list = ls())
library(openxlsx)
library(magrittr)
library(survey)
library(rms)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(tidyr)
library(scales)
library(ggsci)
library(mice)
library(dbCodeBookr)
library(dlookr)
library(tidyverse)
library(tableone)
library(summarytools)
library(MASS)
library(survival)   # Cox模型: coxph(), Surv()
library(broom)      # 模型结果整理: tidy()
library(dplyr)      # 数据操作: mutate(), transmute(), filter(), select(), bind_rows()
library(purrr)      # 循环迭代: map_dfr()
library(tibble)     # 数据框操作: add_row(), add_column()
dt <- readRDS("Nhanes_dt_20241104.rds")
a1<-read.csv("CKM_analysis.csv")
a2<-read.csv("CKM_analysis2.csv")
a2<-left_join(a2,a1,by="SEQN")
dt <- left_join(dt,a2,by=c("seqn"="SEQN"))
colnames(dt)[1584:1606]
## 饮酒
table(dt$A_alcohol_intake)
## PA
table(dt$A_LTPA_all)
dt$dex_SIRI <- dt$LAB1_SEG_c*dt$LAB1_MO_c/dt$LAB1_LY_c
dt$dex_AISI <- dt$LAB1_SEG_c*dt$LAB1_PLT_p*dt$LAB1_MO_c/dt$LAB1_LY_c
dt$dex_NLR <- dt$LAB1_SEG_c/dt$LAB1_LY_c
dt$dex_PLR <- dt$LAB1_PLT_p/dt$LAB1_LY_c
dt$dex_MLR <- dt$LAB1_MO_c/dt$LAB1_LY_c
#####EE#####
E <- c("dex_SIRI","dex_AISI","dex_PLR","dex_MLR","dex_SII")
# #####分类######
# library(nortest)  # 包含正态检验的库
#
# # 初始化向量
# category <- character(0)
# normal_distribution <- character(0)
#
# x<-dt[,E]
# # 遍历数据框的每一列
# for (col in names(x)) {
#   # 判断是否为分类变量
#   if (length(unique(x[[col]])) < 13) {     #设置类别小于n为分类
#     category <- c(category, col)
#   } else {
#     normal_distribution <- c(normal_distribution, col)
#   }
# }
# # 打印结果
# category
# normal_distribution
#
# plot_normality(x[,c("dex_SII","dex_PLR")])
###########
# 死亡
dt$Die_mortstat <- ifelse(dt$Die_mortstat=="Assumed deceased",1,0)
table(dt$Die_mortstat)
dt$Die_ucod_leading<-coalesce(dt$Die_ucod_leading,as.character(dt$Die_mortstat))
table(dt$Die_ucod_leading)
dt$Die_mortstat_cv <- ifelse(dt$Die_ucod_leading=="Diseases of heart (I00-I09, I11, I13, I20-I51)"|
dt$Die_ucod_leading=="Cerebrovascular diseases (I60-I69)",1,0)
table(dt$Die_mortstat_cv)
dt$Die_mortstat_c <- ifelse(dt$Die_ucod_leading=="Diseases of heart (I00-I09, I11, I13, I20-I51)",1,0)
table(dt$Die_mortstat_c)
# Malignant neoplasms (C00-C97)
dt$Die_mortstat_cancer<-ifelse(dt$Die_ucod_leading=="Malignant neoplasms (C00-C97)",1,0)
table(dt$Die_mortstat_cancer)
####筛选####
dt0<-subset(dt,dt$Year %in% c("2011-2012","2013-2014","2015-2016","2017-2018"))
dt1<-subset(dt0,dt0$A_age>=20)
dt2<-subset(dt1,dt1$demo_pregnant!="yes, positive lab pregnancy test or self-reported pregnant at exam"|
is.na(dt1$demo_pregnant))
dt3<-subset(dt2,!is.na(dt2$fpg_mg.dl)&!is.na(dt2$ftg_mg.dl)) #空腹检查
dt4<-subset(dt3,!is.na(dt3$demo_race_asian))
dt5<-subset(dt4,!is.na(dt4$CKM_stage_asian))
dt6<-subset(dt5,!is.na(dt5$dex_SII))
dt7<-subset(dt6,!is.na(dt6$Die_mortstat))
data<-dt7
#####四分组#####
E<-"dex_SII"
for (var in E) {
tryCatch({
# 计算非加权的四分位数
quartiles <- quantile(data[[var]],
probs = c(0.25, 0.5, 0.75),
na.rm = TRUE)
# 创建新的四分位数因子变量
new_varname <- paste(var, "q4", sep = ".")
# 使用cut函数创建四分位分组
data[[new_varname]] <- cut(data[[var]],
breaks = c(-Inf, quartiles, Inf),
labels = c("Q1", "Q2", "Q3", "Q4"),
include.lowest = TRUE)
# 确保结果是因子类型
data[[new_varname]] <- as.factor(data[[new_varname]])
print(paste0(var, ": ", round(quartiles, 4)))
}, error = function(e) {
# 如果发生错误，打印错误信息并跳过当前迭代
message(paste("Error with variable", var, ":", e$message))
})
}
####基线分类####
x <- data[,c(
"A_age","A_sex","A_race","A_BMI","A_LTPA_all","A_pir1.3","A_edu2","A_marital",
"Cursmk","A_alcohol_intake",
"DBP","SBP","waist_cir","fpg_mg.dl","ftg_mg.dl","HbA1c","Lab_TC_mg.dl","LAB2_LDLC_mg.dL","hdl",
"egfr","LAB1_Uric_mg.dL","LAB1_BUN_mg.dL",
"statin_I_N","drug_antiHBP_I_N","drug_antiDM_I_N","DM.y","HTN","CVD","MetS","CKD",
"CKM_stage","CKM_stage_asian",
"Die_mortstat","Die_mortstat_cv","Die_mortstat_c","Die_mortstat_cancer","Die_permth_int",
"LAB1_SEG_c","LAB1_LY_c"
)]
#####  正态性评估  #####
# 偏度(Skewness)：0为对称，>0右偏，<0左偏
# 峰度(Kurtosis)：3为正态，>3尖峰，<3低峰
# 经验法则：偏度绝对值<2且峰度接近3(通常2-4之间)可认为近似正态
# 偏度/峰度经验法则
is_approximately_normal <- function(x) {
# 验证输入
if(!is.numeric(x)) {
warning("输入不是数值向量")
return(NA)
}
# 移除NA值
x_clean <- na.omit(x)
# 检查有效样本量
if(length(x_clean) < 20) {
warning("有效样本量不足(<20)")
return(NA)
}
# 检查唯一值数目（修正括号位置）
if(length(unique(x_clean)) < 10) {
warning("唯一值数目过少(<10)，当前唯一值数目 = ", length(unique(x_clean)))
return(NA)
}
# 计算统计量
s <- abs(skewness(x_clean))
k <- abs(kurtosis(x_clean) - 3)
# 返回结果列表
list(
Skewness = s,
Kurtosis = k + 3,  # 显示原始峰度值
Approx_Normal = s < 2 & k < 4,
N_Valid = length(x_clean),
N_NA = length(x) - length(x_clean)
)
}
# 对每一列应用评估函数
norm_results <- lapply(x, is_approximately_normal)
# 整理结果为数据框
result_df <- do.call(rbind, lapply(norm_results, function(x) {
if(is.list(x)) {
data.frame(
Skewness = x$Skewness,
Kurtosis = x$Kurtosis,
Is_Normal = x$Approx_Normal,
Valid_N = x$N_Valid,
NA_Count = x$N_NA
)
} else {
data.frame(
Skewness = NA,
Kurtosis = NA,
Is_Normal = NA,
Valid_N = NA,
NA_Count = NA
)
}
}))
print(result_df)
category <- rownames(result_df[is.na(result_df$Is_Normal),])
normal_distribution <- rownames(result_df[result_df$Is_Normal=="TRUE"&
!is.na(result_df$Is_Normal),])
n_normal_distribution <- rownames(result_df[result_df$Is_Normal=="FALSE"&
!is.na(result_df$Is_Normal),])
category
normal_distribution
n_normal_distribution
#减掉normal_distribution中的"Die_permth_int"
normal_distribution<-normal_distribution[-which(normal_distribution=="Die_permth_int")]
n_normal_distribution<-c(n_normal_distribution,"Die_permth_int")
##### 纳入分析的和不纳入分析的患者进行基线对比 ######
dt1$datac <- ifelse(dt1$seqn %in% data$seqn, "Included", "Excluded")
table(dt1$datac)
truncate_1n99 <- function (x) {
lower <- quantile(x, 0.001, na.rm= T)
upper <- quantile(x, 0.999, na.rm= T)
x_1n99 <- ifelse(x>upper, upper, ifelse(x<lower,lower,x)) #在此处进行调整
x_1n99
}
all_vars <- setdiff(c(normal_distribution, n_normal_distribution), "Die_permth_int")
data <- data %>%
mutate(across(all_of(all_vars),
list(`999` = ~truncate_1n99(.))))
all_vars_999 <-paste0(all_vars,"_999")
## 应用
batch_results <- uni_analysis(
data,
vars = c("dex_SII.q4",all_vars_999,category),
outcome = "Die_mortstat",
time_var = "Die_permth_int",
effect_digits = 2,
p_digits = 3,
full = T,
event = T
)
## 应用
batch_results <- yyds_uni_analysis(
data,
vars = c("dex_SII.q4",all_vars_999,category),
outcome = "Die_mortstat",
time_var = "Die_permth_int",
effect_digits = 2,
p_digits = 3,
full = T,
event = T
)
View(batch_results)
# 偏度/峰度经验法则
z <- yyds_type(x)
category
normal_distribution
n_normal_distribution
z$variable_types$categorical
z$variable_types$normal
z$variable_types$non_normal
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
?ols
??ols
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::install()
#'
#' # 线性回归
#' fit <- lm(mpg ~ wt + factor(cyl), data = mtcars)
#' yyds_pfortrend(fit, "wt")
#'
#' # 逻辑回归
#' fit <- glm(vs ~ mpg + gear, data = mtcars, family = binomial)
#' yyds_pfortrend(fit, "mpg")
#' }
#'
yyds_pfortrend <- function(fit, var) {
# 检查模型类型
supported_models <- c("coxph", "glm", "lm", "svyglm", "svycoxph")
if (!inherits(fit, supported_models)) {
stop("模型类型不支持！支持的类型：", paste(supported_models, collapse = ", "))
}
# 提取模型数据
data <- model.frame(fit)
if (!var %in% colnames(data)) {
stop("变量 ", var, " 不在模型中！")
}
# 检查变量是否为连续变量或仅有两个取值（二分类变量）
var_data <- data[[var]]
unique_vals <- unique(na.omit(var_data))
n_unique <- length(unique_vals)
if (n_unique <= 2) {
message("变量 '", var, "' 为二分类变量，无需进行趋势检验。")
return(NA)
}
# 强制变量为数值（无论原始类型）
data[[var]] <- as.numeric(data[[var]])
# 重新拟合模型（确保变量作为连续变量）
formula_original <- formula(fit)
formula_new <- update(formula_original, as.formula(paste(". ~ . -", var, "+ as.numeric(", var, ")")))
fit_new <- update(fit, formula = formula_new)
# 提取趋势P值
coef_table <- summary(fit_new)$coefficients
var_numeric <- paste0("as.numeric(", var, ")")
# 处理不同模型类型的行名差异
row_names <- rownames(coef_table)
# 检查可能的变量名形式 (glm可能不保留as.numeric()包装)
possible_names <- c(var_numeric, var)
# 找到实际使用的变量名
matched_name <- possible_names[possible_names %in% row_names]
if (length(matched_name) == 0) {
stop("变量 ", var, " 的系数不存在，可能模型未正确拟合。可用变量: ",
paste(row_names, collapse = ", "))
}
p_col <- ifelse(inherits(fit, c("lm", "glm")) && family(fit)$family == "gaussian",
"Pr(>|t|)", "Pr(>|z|)")
p_trend <- coef_table[matched_name[1], p_col]
pfortrend <- ifelse(p_trend < 0.001, "<0.001", sprintf("%.4f", p_trend))
print(paste0("p for trend: ", pfortrend))
return(pfortrend)
}
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
library(devtools)
library(usethis)
library(roxygen2)
devtools::document()
devtools::document()
devtools::build()
